#include "cellListNeighborStructure.h"

cellListNeighborStructure::cellListNeighborStructure(std::vector<double> &minPos, std::vector<double> &maxPos, double gridSize)
    {
    cellList.setDomainAndGridSize(minPos,maxPos,gridSize);
    };

void cellListNeighborStructure::setInteractionRange(double range)
    {
    cellList.setGridSize(range);
    };

void cellListNeighborStructure::initialize(std::vector<meshPosition> &_particles)
    {
    cellList.sort(_particles);
    };

void cellListNeighborStructure::constructCandidateNeighborList(meshPosition &p, int particleIndex, std::vector<int> &candidateNeighborIndices, std::vector<meshPosition> &candidateParticles)
    {
    int neighborNumberGuess = cellList.nMax*2;
    candidateNeighborIndices.clear();
    candidateNeighborIndices.reserve();
    candidateParticles.clear();
    candidateParticles.reserve();


    int primaryCellIndex = cellList.positionToCellIndex(p);
    std::vector<int> cellsToSearch;
    cellList.getCellNeighbors(primaryCellIndex, cellsToSearch);

    int cellNumber = cellsToSearch.size();
    for (int cc = 0; cc < cellNumber; ++cc)
        {
        int currentCellIndex = cellsToSearch[cc];
        int localNumberOfCells = cellList.elementsPerCell[currentCellIndex];
        for(int ii = 0; ii < localNumberOfCells; ++ii)
            {
            int idx = cellList.indices[cellList.cellListIndexer(ii,currentCellIndex)];
            if( (particleIndex + offset) != idx)
                {


                }
            };
        };
    };
